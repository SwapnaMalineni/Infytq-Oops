class Rider:
    def __init__(self,trained_status,experience):
        self.__trained_status=trained_status
        self.__experience=experience
    def rides_vehicle(self):
        print("vehicle is riding")
class BikeRider(Rider):
    def __init__(self,trained_status,experience,race_license):
        super().__init__(trained_status,experience)
        self.__race_license=race_license
    def rides_in_dome(self):
        print("bike is riding")
class CycleRider(Rider):
    def rides_blindfolded(self):
        print("cycle is riding")
b=BikeRider(True,3,True)
b.rides_in_dome()
c=CycleRider(True,3)
c.rides_blindfolded()
class DirectToHomeService(ABCMeta):
    __counter=101
    def __init__(self,consumer_name):
        self.__consumer_name=consumer_name
        self.__consumer_number=DirectToHomeService.__counter
        DirectToHomeService.__counter+=1
    def get_consumer_name(self):
        return self.__consumer_name
    def get_consumer_number(self):
        return self.__consumer_number
    @abstractmethod
    def calculate_monthly_rent(self):
        pass
class BasePackage(DirectToHomeService):
    def __init__(self,consumer_name,base_pack_name,subscription_period):
        self.__base_pack_name=base_pack_name
        self.__subscription_period=subscription_period
    def validate_base_pack_name(self):
        if self.__base_pack_name not in ["Silver","Gold","Platinum"]:
            self.__base_pack_name="Silver"
            print("Base package name is incorrect, set to Silver")
    def calculate_monthly_rent(self):
        monthly_rent=0
        if self.__subscription_period>=1 and self.__subscription_period<=24:
            self.validate_base_pack_name()
            if self.__base_pack_name=="Silver":
                monthly_rent+=350.00
            if self.__base_pack_name=="Gold":
                monthly_rent+=440.00
            if self.__base_pack_name=="Platinum":
                monthly_rent+=560.00
            if self.__subscription_period>12:
                discount_amount=monthly_rent
            else:
                discount_amount=0
            final_monthly_rent=((monthly_rent*self.__subscription_period)-discount_amount)/self.__subscription_period
            return final_monthly_rent
        return -1
    def get_base_pack_name(self):
        return self.__base_pack_name
    def get_subscription_period(self):
        return self.__subscription_period
    
