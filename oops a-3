class Parrot:
    __counter=7000
    def __init__(self,name,color):
        self.__name=name
        self.__color=color
        Parrot.__counter+=1
        self.__unique_number=Parrot.__counter
    
    def get_name(self):
        return self.__name
    def get_color(self):
        return self.__color
    def get_unique_number(self):
        return self.__unique_number
class Customer:
    def __init__(self,customer_id,customer_name,address):
        self.__customer_id=customer_id
        self.__customer_name=customer_name
        self.__address=address
    def validate_customer_id(self):
        if len(str(self.__customer_id))==6 and (str(self.__customer_id))[0]=="1":
            return True
        return False
    def get_customer_id(self):
        return self.__customer_id
    def get_customer_name(self):
        return self.__customer_name
    def get_address(self):
        return self.__address
        
class Freight:
    counter=198
    def __init__(self,recipient_customer,from_customer,weight,distance):
        self.__freight_id=None
        self.__recipient_customer=recipient_customer
        self.__from_customer=from_customer
        self.__weight=weight
        self.__distance=distance
        self.__freight_charge=None
    def get_freight_id(self):
        return self.__freight_id
    def get_recipient_customer(self):
        return self__recipient_customer
    def get_from_customer(self):
        return self.__from_customer
    def get_weight(self):
        return self.__weight
    def get_distance(self):
        return self.__distance
    def get_freight_charge(self):
        return self.__freight_charge
    def validate_weight(self): 
        if self.__weight%5==0:
            return True
        return False
    def validate_distance(self):
        if self.__distance>=500 and self.__distance<=5000:
            return True
        return False
   
    def forward_cargo(self):
        if self.__from_customer.validate_customer_id() and self.__recipient_customer.validate_customer_id() and self.validate_weight() and self.validate_distance():
            Freight.counter+=2
            self.__freight_id=Freight.counter
            self.__freight_charge=(self.__weight*150)+(self.__distance*60)
        else:
            self.__freight_charge=0
class Customer:
    def __init__(self,customer_name):
        self.__customer_name=customer_name
        self.__payment_status=None
    def get_payment_status(self):
        return self.__payment_status
    def get_customer_name(self):
        return self.__customer_name
    def pays_bill(self,bill): 
        self.__payment_status="Paid"
        print(self.__customer_name,bill.get_bill_id(),bill.get_bill_amount())
class Bill:
    counter=1000
    def __init__(self):
        self.__bill_id=None
        self.__bill_amount=None
    def get_bill_id(self):
        return self.__bill_id
        
    def get_bill_amount(self):
        return self.__bill_amount
    def generate_bill_amount(self,item_quantity,items):
        bill_amount=0
        Bill.counter+=1
        for key,val in item_quantity.items():
            for i in items:
                if i.get_item_id().lower()==key.lower():
                     bill_amount+=(val*i.get_price_per_quantity())
        self.__bill_id="B"+str(Bill.counter)
        self.__bill_amount=bill_amount
class Item:
    def __init__(self,item_id,description,price_per_quantity):
        self.__item_id=item_id
        self.__description=description
        self.__price_per_quantity=price_per_quantity
        
    def get_item_id(self):
        return self.__item_id
        
    def get_description(self):
        return self.__description
    def get_price_per_quantity(self):
        return self.__price_per_quantity

class Ticket:
    counter=0
    def __init__(self,passenger_name,source,destination):
        self.__passenger_name=passenger_name
        self.__source=source
        self.__destination=destination
        Ticket.counter+=1
        self.__ticket_id=None
    def get_ticket_id(self):
        return self.__ticket_id

    def get_passenger_name(self):
        return self.__passenger_name

    def get_source(self):
        return self.__source

    def get_destination(self):
        return self.__destination
    def validate_source_destination(self):
        source=self.get_source().upper()
        destination=self.get_destination().upper()
        if ((source=="Delhi".upper()) and (( destination=="Mumbai".upper()) or (destination=="Pune".upper()) or (destination=="chennai".upper()) or (destination=="Kolkata".upper()))):
            return True
        else:
            return False

    def generate_ticket(self):
        if self.validate_source_destination() is True:
            if Ticket.counter<10:
                self.__ticket_id=self.get_source()[0]+self.get_destination()[0]+str("0")+str(Ticket.counter)
            else:
                self.__ticket_id=self.get_source()[0]+self.get_destination()[0]+str(Ticket.counter)
            return  self.__ticket_id
        else:
            self.__ticket_id=None
    
class Applicant:
    __application_dict={'A':0,'B':0,'c':0}
    __applicant_id_count=1000
    def __init__(self,applicant_name):
        self.__applicant_name=applicant_name
        self.__applicant_id=None
        self.__job_band=None
    def get_applicant_name(self):
        return self.__applicant_name
    def get_applicant_id(self):
        return self.__applicant_id
    def get_job_band(self):
        return self.__job_band
    @staticmethod
    def get_application_dict(self):
        return Applicant.__application_dict
    def generate_applicant_id(self):
        Applicant.__applicant_id_count+=1
        self.__applicant_id=Applicant.applicant_id_count
    def apply_for_job(self,job_band): 
        if Applicant.__application_dict.get(job_band)==5:
            return -1
        else:  
            if Applicant.__application_dict.get(job_band)==None:
                Applicant.__application_dict[job_band]=0
            else:
                Applicant.__application_dict[job_band]+=1
                self.generate_applicant_id()
                self.__job_band=job_band
